### Технічне завдання: Розробка календаря на JavaScript з підтримкою подій та збереженням даних у LocalStorage

Роботу необхідно загрузити на GitHub, та робити коміти на кожному етапі виконання задач.
По цих комітах я буду слідкувати за розвитком проекту(виправлення помилок, вдосконалення, всі етапи розвитку проекту!!!)
Якщо вся робота з'явиться за один день - можно отримати 1 бал)

#### Опис:
Необхідно розробити веб-додаток, який реалізує календар з можливістю створення, редагування та видалення подій для кожного дня.
Інформація про події має зберігатися у **LocalStorage**, щоб вона залишалася доступною після перезавантаження сторінки.

#### Основні вимоги:

1. **Структура проєкту:**
   - **HTML-сторінка (index.html)** для відображення календаря та взаємодії з користувачем.
   - **JavaScript файл (app.js)** для управління логікою взаємодії з календарем, подіями та LocalStorage.
   - **CSS-файл (style.css)** для стилізації інтерфейсу.

2. **Функціональність календаря:**
   - Користувач може переглядати календар на **поточний місяць**.
   - Є можливість **перемикання місяців** вперед та назад.
   - В кожній комірці дня можна побачити події, які заплановані на цей день.
   - При кліку на конкретний день користувач може додати нову подію, відредагувати наявні події або видалити їх.

3. **Створення та редагування подій:**
   - При натисканні на комірку дня має відкриватися форма (модальне вікно або розділ на сторінці), де можна:
     - Ввести назву події.
     - Вказати час події (*опціонально).
     - Опис події (*опціонально).
   - Після збереження, подія зберігається у **LocalStorage** та відображається в календарі.
   - Можливість редагування події: якщо подія вже існує, користувач може змінити її назву, час чи опис.
   - Можливість видалення події з календаря.

4. **Збереження даних у LocalStorage:**
   - Всі події повинні зберігатися у LocalStorage, щоб дані не губилися після оновлення сторінки.
   - Структура збереження подій повинна бути організована так, щоб кожен день міг мати кілька подій. Наприклад:
     json:
     {
       "2024-10-17": [
         { "title": "Зустріч з клієнтом", "time": "10:00", "description": "Офіс" },
         { "title": "Лекція", "time": "14:00", "description": "Університет" }
       ],
       "2024-10-18": [
         { "title": "Тренування", "time": "19:00", "description": "Спортзал" }
       ]
     }
   - Дані повинні автоматично завантажуватися з LocalStorage під час завантаження сторінки та відображатися у відповідних днях календаря.

5. **Інтерфейс:**
   - Календар має бути відображений у вигляді таблиці (сітки), де кожен день представлений окремою коміркою.
   - Дні, що належать до поточного місяця, повинні бути виділені стилістично.
   - Дні з подіями мають додатково підсвічуватися (наприклад, виділення кольором або іконкою).
   - При натисканні на конкретний день повинен з’являтися фукнціонал(форма, або модальне вікно) для додавання/редагування події.

6. **Перемикання місяців:**
   - Користувач повинен мати можливість переходити між місяцями вперед і назад (наприклад, кнопки "Наступний місяць" та "Попередній місяць").
   - Відображається назва поточного місяця і року.
   - Події для різних місяців мають бути доступні після перемикання місяця, і вони також повинні зберігатися у LocalStorage.

7. **Валідація:**
   - Потрібно перевіряти, чи всі необхідні поля заповнені перед додаванням/редагуванням події.
   - Події без назви не повинні зберігатися.
   - Якщо користувач ввів неправильну дату або час, потрібно вивести повідомлення про помилку(не можно створювати події заднім числом)

8. **Видалення подій:**
   - Користувач повинен мати можливість видалити подію з конкретного дня.
   - Після видалення події потрібно оновити дані в LocalStorage та прибрати подію з відображення в DOM.

#### Додаткові вимоги:

1. **Стилізація:**
   - Календар повинен бути привабливим і зручним для користувача. Можливе використання CSS Flexbox або Grid для сітки календаря.
     (Надати інформацію про джерело, звідки Ви брали дизайн).
   - Для комірок календаря з подіями можна використовувати кольорові індикатори чи іконки, що показують наявність подій.

2. **UX-поліпшення:**
   - При натисканні на день або подію повинно з’являтися модальне вікно (діалогове вікно) для створення або редагування події.
   - Реалізувати підтвердження видалення події (наприклад, через модальне вікно із запитанням: "Ви впевнені, що хочете видалити цю подію?").

3. **Індикація поточного дня:**
   - Поточний день має бути виділений іншим кольором або шрифтом у календарі.

4. **Адаптивність:**
   - Календар має бути адаптованим до різних екранів і виглядати коректно як на десктопних, так і на мобільних пристроях.

#### Приклад сценарію використання:

1. Користувач відкриває сторінку і бачить календар на поточний місяць.
2. Він натискає на конкретний день і в модальному вікні вводить назву події, час та опис, після чого зберігає подію.
3. Подія зберігається в LocalStorage і відображається в комірці календаря.
4. Користувач перемикається на інший місяць, додає нові події, а потім повертається до попереднього місяця — всі події зберігаються і відображаються.
5. Користувач натискає на подію в конкретному дні, редагує її або видаляє. Зміни оновлюються в календарі та LocalStorage.

#### Технічні обмеження:
- Використовувати **чистий JavaScript** (без використання сторонніх бібліотек, таких як jQuery).
- Використовувати **LocalStorage** для збереження даних подій.
- Не використовувати бекенд або серверну частину для збереження подій (всі дані зберігаються на стороні клієнта).

#### Очікуваний результат:
Готовий веб-додаток, який реалізує функціонал календаря з можливістю додавання,
редагування, видалення подій з використанням LocalStorage для збереження інформації між сесіями користувача.